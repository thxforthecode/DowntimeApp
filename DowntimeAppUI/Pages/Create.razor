@page "/Create"
@attribute [Authorize]
@using DowntimeAppUI.Components
@using DowntimeAppUI.Models

@inject AuthenticationStateProvider authProvider
@inject IMachineData machineData
@inject IUserData userData
@inject IReportData reportData
@inject IPartData partData
@inject NavigationManager navManager


<h1 class="page-heading text-uppercase mb-4">Create a Report</h1>

<div class="row justify-content-center create-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        <div class="close-button-section">
            <button class="btn btn-close" @onclick="ClosePage"></button>
        </div>
        @if(machines != null)
        {
            <EditForm Model="report" OnValidSubmit="CreateReport">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="issue-text">Report</label>
                    <div class="input-description">What happened to your machine?</div>
                    <InputTextArea class="form-control" id="issue-text" @bind-Value="report.Issue" />
                </div>
                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="machine">Machine</label>
                    <div class="input-description">Choose your machine</div>
                    
                    <div class="col-lg-8">
                        <MyInputRadioGroup  @bind-Value="report.MachineId">
                            @foreach (var m in machines)
                            {
                                <div class="radio-item-group">
                                    <InputRadio Value="m.MachineId" id="@m.MachineId" />
                                    <label for="@m.MachineId" >@m.MachineName - @m.MachineDept</label>
                                </div>
                            }
                            @if(report.MachineId is not null)
                            {
                                <button class="btn btn-main btn-sm text-uppercase" type="button" @onclick="SelectMachine">Show Parts List</button>
                                
                            }
                        </MyInputRadioGroup>
                    </div>
                </div>
                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="parts-list">Parts List</label>
                    <div class="input-description">What parts were replaced?</div>
                    @if (parts is not null)
                    {
                       
                        @foreach(var p in parts)
                        {
                            <div class="radio-item-group">
                                <InputCheckbox @bind-Value="@p.isIncluded" id="@p.PartId" />
                                <label for="@p.PartId">@p.Name - @p.SerialNumber</label>
                            </div>
                        }
                        <button class="btn btn-main btn-sm text-uppercase" type="button" @onclick="AddPartsToList">Add Selected Parts to Report</button>
                    }
                    else
                    {
                        <div>This Machine's Parts List is currently empty!</div>
                    }
                </div>
                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="status">Status</label>
                    <div class="input-description">Is this issue ongoing or was it fixed?</div>
                    <div class="col-lg-8">
                        <MyInputRadioGroup id="status" @bind-Value="report.StatusAtCreation">
                            <div class="radio-item-group">
                                <InputRadio Value="@true" id="thang" />
                                <label for="thang">Ongoing Issue</label>
                            </div>
                            <div class="radio-item-group">
                            
                                <InputRadio Value="@false" id="hmm" />
                                <label for="hmm">Solved!</label>
                            </div>
                        </MyInputRadioGroup>
                    </div>
                </div>

                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="solution-text">Report</label>
                    <div class="input-description">What solved or helped the problem with your machine?</div>
                    <InputTextArea class="form-control" id="solution-text" @bind-Value="report.Solution" />
                </div>
                
                <div class="center-children">
                    <button class="btn btn-main btn-lg text-uppercase" type="submit">Create Report</button>
                </div>


            </EditForm>
        }
        
    </div>
</div>


@code {
    private CreateReportModel report = new();
    private List<MachineModel> machines;
    private List<CreatePartsListModel> parts;
    private UserModel loggedInUser;
    private string lastId;
    private bool[] partFlags = new bool[100];
    private int partIndex = 0;

    //ValueChanged="((string e) => SelectMachine(e))" TValue="string" ValueExpression="() => report.MachineId" id="machine"
    protected async override Task OnInitializedAsync()
    {
        machines = await machineData.GetAllMachines();
        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task CreateReport()
    {
        ReportModel r = new();
        r.Issue = report.Issue;
        r.Solution = report.Solution;
        r.Author = new BasicUserModel(loggedInUser);
        r.Machine = machines.Where(m => m.MachineId == report.MachineId).First();
        r.Status = report.StatusAtCreation;
        if(report.Parts is not null)
        {
            foreach(var p in report.Parts)
            {
                r.PartsList.Add(p);
            }    
        }
        if(r.Machine == null)
        {
            report.MachineId = "";
            return;
        }

        await reportData.CreateReport(r);
        report = new();
        ClosePage();
    }

    private void SelectMachine()
    {
        if (parts == null)
        {
            parts = new List<CreatePartsListModel>();
        }
        var mach = machines.Where(m => m.MachineId == report.MachineId).First();

        if(mach.PartsList is not null)
        {
            foreach(var p in mach.PartsList)
            {
                var thang = new CreatePartsListModel(p);
                parts.Add(thang); 
            }
        }

        return;

        // var mach = await machineData.GetMachineById(machId);
        // if(mach.PartsList is not null)
        // {
        //     parts = mach.PartsList;
        // }
        // else
        // {
        //     return;
        // }
    }

    private async void AddPartsToList()
    {

        foreach(var p in parts)
        {
            if (p.isIncluded)
            {
                var part =  await partData.GetPart(p.PartId);
                var basicPart = new BasicPartModel(part);
                report.Parts.Add(basicPart);
            }

        }


        return;
    }

    private bool SetFlag(bool flag)
    {
        if (!flag)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
